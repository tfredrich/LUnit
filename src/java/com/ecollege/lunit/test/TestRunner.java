/*
    Copyright 2008, eCollege, Inc.  All rights reserved.
*/
package com.ecollege.lunit.test;

import java.util.List;

import org.apache.log4j.Logger;

import com.ecollege.lunit.fixture.TestFixture;
import com.ecollege.lunit.summary.TestSummarizer;
import com.ecollege.lunit.summary.TestSummary;
import com.ecollege.lunit.util.Executable;

/**
 * Responsible for initiating a list of TestCase instances.  This is the entry point into running the TestCase/Scenario
 * collection.  Subclasses provide additional value to this abstract class, such as running test cases sequentially or
 * in parallel.
 * 
 * <p/>A TestFixture assigned to this TestRunner will be initiated before all test cases are begun and after all test cases
 * have completed.
 * 
 * <p/>A TestSummarizer is used to summarize the results aggregated from all the events generated by the test case scenarios.
 * 
 * @author toddf
 * @since Sep 12, 2008
 */
public abstract class TestRunner
implements Executable
{
	// SECTION: CONSTANTS

	protected static final Logger LOG = Logger.getLogger(TestRunner.class);

	
	// SECTION: INSTANCE VARIABLES

	/**
	 * A reusable TestFixture that performs setup and teardown activities
	 * before all tests are run.
	 */
	private TestFixture fixture = null;
	private List<TestCase> testCases = null;
	private boolean shouldExitOnFailure = false;
	private TestSummarizer summarizer;


	// SECTION: ACCESSORS/MUTATORS

	public TestFixture getFixture()
	{
		return fixture;
	}

	public boolean hasFixture()
	{
		return (fixture != null);
	}

	public void setFixture(TestFixture fixture)
	{
		this.fixture = fixture;
	}

	public List<TestCase> getTestCases()
    {
    	return testCases;
    }

	public void setTestCases(List<TestCase> testCases)
    {
    	this.testCases = testCases;
    }

	public boolean shouldExitOnFailure()
    {
    	return shouldExitOnFailure;
    }

	public void setExitOnFailure(boolean shouldExitOnFailure)
    {
    	this.shouldExitOnFailure = shouldExitOnFailure;
    }

	public TestSummarizer getSummarizer()
	{
		return summarizer;
	}
	
	public boolean hasSummarizer()
	{
		return (getSummarizer() != null);
	}

	public void setSummarizer(TestSummarizer summarizer)
	{
		this.summarizer = summarizer;
	}
	
	
	// SECTION: EXECUTE TEST CASE

	@Override
	public void execute()
	throws Exception
	{
		performSetup();
		executeTestCases();
		performTeardown();
		summarize();
	}

	protected abstract void executeTestCases()
	throws Exception;

	/**
     * @param test
     */
    protected void executeTestCase(TestCase test)
    {
	    try
	    {
	    	LOG.info(test.getName());
	    	test.execute();
	    }
	    catch (Exception e)
	    {
	    	LOG.error(test.getName(), e);
	    }
    }

    protected void performSetup()
    throws Exception
    {
	    if (hasFixture())
	    {
	    	getFixture().setup();
	    }
    }

    protected void performTeardown()
    throws Exception
    {
    	if (hasFixture())
    	{
    		getFixture().teardown();
    	}
    }
	
	private void summarize()
	{
		if (hasSummarizer())
		{
			LOG.info("Summarizing results...");
			List<TestSummary> summaries = getSummarizer().summarize();
			
			for (TestSummary summary : summaries)
			{
				System.out.println(summary.toString());
			}
		}
		else
		{
			LOG.info("No summarizer found.");
		}
	}
}
